{
  "hi": "Hi! It's nice to meet you. Is there something I can help you with, or would you like to chat?",
  "idk": "That's okay! It can be tough to know what to say sometimes. Would you like to talk about something specific or just chat for a bit? I'm here to listen and help if I can.",
  "exit": "It was nice chatting with you. If you want to talk again or have any questions in the future, feel free to come back and say hi! Otherwise, I'll exit too. Bye for now!",
  "\n        Based on the following context, answer the user's question.\n        If the context is not relevant, answer based on your general knowledge.\n\n        Context:\n        \"Cirkitly is an AI-powered QA copilot for hardware developers.\"\n\n        Question:\n        \"hi\"\n        ": "A friendly hello! Since Cirkitly is an AI-powered QA copilot for hardware developers, I'll take a guess that you might be a hardware developer looking to get started with using Cirkitly. Am I right? If not, feel free to ask your question, and I'll do my best to help!",
  "\n        Based on the following context, answer the user's question.\n        If the context is not relevant, answer based on your general knowledge.\n\n        Context:\n        \"The universe is theorized to end in a 'heat death', where it becomes too cold to sustain life.\"\n\n        Question:\n        \"exit\"\n        ": "A simple one!\n\nSince there's no question related to the context, I'll assume you want me to exit our conversation. In that case... BYE! It was nice chatting with you. If you have any actual questions in the future, feel free to ask!",
  "\n        Based on the following context, answer the user's question.\n        If the context is not relevant, answer based on your general knowledge.\n\n        Context:\n        \"Cirkitly is an advanced AI copilot designed specifically for hardware developers. Its primary function is to read and understand hardware specifications, firmware, and architecture documents. By doing so, it can auto-generate comprehensive test suites. This helps developers catch bugs early, ensure their products meet compliance standards, and significantly accelerate the development cycle. The company's motto is \"Test less. Ship smarter.\"\"\n\n        Question:\n        \"What is the motto of Cirkitly?\"\n        ": "According to the context, the motto of Cirkitly is \"Test less. Ship smarter.\"",
  "\n        Based on the following context, answer the user's question.\n        If the context is not relevant, answer based on your general knowledge.\n\n        Context:\n        \"The ultimate fate of the universe is a topic of ongoing cosmological research. The most widely accepted theory, based on current observations, is the \"heat death\" or \"Big Freeze\" scenario. In this future, the universe continues to expand indefinitely. Over trillions of years, all stars will burn out, galaxies will dissolve, and eventually, even black holes will evaporate through Hawking radiation, leaving behind only a cold, dark, and uniform sea of low-energy particles.\"\n\n        Question:\n        \"How will the universe end according to the heat death theory?\"\n        ": "According to the context, the universe will end with a \"heat death\" or \"Big Freeze\" scenario. Specifically:\n\n* The universe will continue to expand indefinitely.\n* Over trillions of years, all stars will burn out.\n* Galaxies will dissolve.\n* Even black holes will evaporate through Hawking radiation.\n* Eventually, only a cold, dark, and uniform sea of low-energy particles will be left behind.",
  "\n        Based on the following context, answer the user's question.\n        If the context is not relevant, answer based on your general knowledge.\n\n        Context:\n        \"The ultimate fate of the universe is a topic of ongoing cosmological research. The most widely accepted theory, based on current observations, is the \"heat death\" or \"Big Freeze\" scenario. In this future, the universe continues to expand indefinitely. Over trillions of years, all stars will burn out, galaxies will dissolve, and eventually, even black holes will evaporate through Hawking radiation, leaving behind only a cold, dark, and uniform sea of low-energy particles.\"\n\n        Question:\n        \"exit\"\n        ": "A simple one!\n\nSince the question is just \"exit\", I'll assume you're asking about the ultimate fate of the universe in the context provided. In that case, according to the scenario described, the exit would be a cold, dark, and uniform sea of low-energy particles, marking the end of the universe as we know it.",
  "\n        You are an expert in C unit testing for embedded systems, using the Unity test framework.\n        Your task is to generate a complete C unit test file for the provided source code.\n\n        You are given the source code to test AND the full content of its required header files for context.\n        Use this full context to create accurate tests.\n\n        ### Required Headers Context ###\n        // Content of header: spi.h\n#ifndef SPI_H\n#define SPI_H\n\n#include <stdint.h>\n#include <stddef.h>\n\n// Error codes\n#define SPI_SUCCESS 0\n#define SPI_ERROR_NULL_POINTER -1\n#define SPI_ERROR_INVALID_LENGTH -2\n\nint spi_write(uint8_t* data, uint16_t len);\n\n#endif // SPI_H\n\n\n\n        \n        ### Source Code to Test ###\n        ```c\n        #include \"spi.h\" // Use the new header\n\n/**\n * @brief Writes a block of data to the SPI bus.\n * \n * @param data Pointer to the data buffer.\n * @param len The number of bytes to write. Must be > 0.\n * @return int 0 on success, error code otherwise.\n */\nint spi_write(uint8_t* data, uint16_t len) {\n    if (data == NULL) {\n        return SPI_ERROR_NULL_POINTER;\n    }\n\n    if (len == 0) {\n        return SPI_ERROR_INVALID_LENGTH;\n    }\n    \n    // Platform-specific SPI write logic would go here.\n    return SPI_SUCCESS;\n}\n\n        ```\n\n        Guidelines:\n        1.  Generate a complete, compilable C file.\n        2.  Include necessary headers (`unity.h`, and the header for the code under test).\n        3.  Create tests for success paths and all edge cases (NULL pointers, invalid values, etc.).\n        4.  Include `setUp()`, `tearDown()`, and a `main()` function to run the tests.\n\n        Generate the unit test file now.\n        ": "Here is the generated C unit test file using Unity:\n\n```c\n#include \"unity.h\"\n#include \"spi.h\"\n\n// Test setup and teardown\nvoid setUp(void)\n{\n    // Initialize any variables or resources needed for testing\n}\n\nvoid tearDown(void)\n{\n    // Clean up after each test, including resetting to a known state\n}\n\n// Tests for spi_write function\n\nvoid test_spi_write_success(void) {\n    uint8_t data[] = {0x01, 0x02, 0x03};\n    uint16_t len = sizeof(data) / sizeof(data[0]);\n    \n    int result = spi_write(data, len);\n    TEST_ASSERT_EQUAL(SPI_SUCCESS, result);\n}\n\nvoid test_spi_write_null_pointer(void) {\n    int result = spi_write(NULL, 1);\n    TEST_ASSERT_EQUAL(SPI_ERROR_NULL_POINTER, result);\n}\n\nvoid test_spi_write_invalid_length(void) {\n    uint8_t data[] = {0x01};\n    int result = spi_write(data, 0);\n    TEST_ASSERT_EQUAL(SPI_ERROR_INVALID_LENGTH, result);\n}\n\nint main(void)\n{\n    // Run all tests\n    RUN_TEST(test_spi_write_success);\n    RUN_TEST(test_spi_write_null_pointer);\n    RUN_TEST(test_spi_write_invalid_length);\n\n    returnUNITY_EXIT_CODE;\n}\n```\n\nThis file contains:\n\n*   The Unity test framework headers (`unity.h`)\n*   The `spi.h` header to access the code under test\n*   Test setup and teardown functions (`setUp()` and `tearDown()`)\n*   Four tests for different scenarios:\n    *   Success: Testing with valid input parameters.\n    *   Null pointer: Testing what happens when a NULL pointer is passed as an argument.\n    *   Invalid length: Testing what happens when the length parameter is 0.\n\nThe `main()` function is used to run all the test cases."
}